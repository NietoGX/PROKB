// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Prokb.Data;

namespace Prokb.Migrations
{
    [DbContext(typeof(ProkbContext))]
    [Migration("20200331000203_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DirectorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmpresaId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmpresaId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsable1Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsable2Id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId1");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Articulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Interno")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Articulo");
                });

            modelBuilder.Entity("Decision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Decisiones");
                });

            modelBuilder.Entity("EmpresaAreaSeccionUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("EmpresaId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmpresaId1")
                        .HasColumnType("int");

                    b.Property<int>("SeccionId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("EmpresaId1");

                    b.HasIndex("SeccionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("EmpresaAreaSeccionUsuarios");
                });

            modelBuilder.Entity("Incidencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Inactivo")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Incidencias");
                });

            modelBuilder.Entity("Prokb.Data.Models.Documento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FichaAnalisisId")
                        .HasColumnType("int");

                    b.Property<int?>("FichaArticuloEFIMEDId")
                        .HasColumnType("int");

                    b.Property<int?>("FichaArticuloId")
                        .HasColumnType("int");

                    b.Property<int?>("FichaCalidadId")
                        .HasColumnType("int");

                    b.Property<int?>("FichaComprasId")
                        .HasColumnType("int");

                    b.Property<int?>("FichaEjecucionId")
                        .HasColumnType("int");

                    b.Property<int?>("FichaIncidenciaId")
                        .HasColumnType("int");

                    b.Property<int?>("FichaLogisticaId")
                        .HasColumnType("int");

                    b.Property<int?>("FichaNoConformidadEficienciaEnergeticaId")
                        .HasColumnType("int");

                    b.Property<int?>("FichaNoConformidadMedioAmbienteId")
                        .HasColumnType("int");

                    b.Property<int?>("FichaNoConformidadProductoAcabadoId")
                        .HasColumnType("int");

                    b.Property<int?>("FichaNoConformidadServicioId")
                        .HasColumnType("int");

                    b.Property<int?>("FichaPlanificacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FichaAnalisisId");

                    b.HasIndex("FichaArticuloEFIMEDId");

                    b.HasIndex("FichaArticuloId");

                    b.HasIndex("FichaCalidadId");

                    b.HasIndex("FichaComprasId");

                    b.HasIndex("FichaEjecucionId");

                    b.HasIndex("FichaIncidenciaId");

                    b.HasIndex("FichaLogisticaId");

                    b.HasIndex("FichaNoConformidadEficienciaEnergeticaId");

                    b.HasIndex("FichaNoConformidadMedioAmbienteId");

                    b.HasIndex("FichaNoConformidadProductoAcabadoId");

                    b.HasIndex("FichaNoConformidadServicioId");

                    b.HasIndex("FichaPlanificacionId");

                    b.ToTable("Documentos");
                });

            modelBuilder.Entity("Prokb.Data.Models.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NombreEmpresa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("Prokb.Data.Models.FichaNoConformidadEficienciaEnergetica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("EmisorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmisorId1")
                        .HasColumnType("int");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("FichaAnalisisId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FichaAnalisisId1")
                        .HasColumnType("int");

                    b.Property<string>("FichaArticuloEFIMEDId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FichaArticuloEFIMEDId1")
                        .HasColumnType("int");

                    b.Property<string>("FichaEjecucionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FichaEjecucionId1")
                        .HasColumnType("int");

                    b.Property<string>("FichaIncidenciaId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FichaIncidenciaId1")
                        .HasColumnType("int");

                    b.Property<string>("FichaNoConformidadId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FichaReferencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeccionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("EmisorId1");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("FichaAnalisisId1");

                    b.HasIndex("FichaArticuloEFIMEDId1");

                    b.HasIndex("FichaEjecucionId1");

                    b.HasIndex("FichaIncidenciaId1");

                    b.HasIndex("SeccionId");

                    b.ToTable("FichasNoConformidad");
                });

            modelBuilder.Entity("Prokb.Data.Models.FichaNoConformidadMedioAmbiente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("EmisorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmisorId1")
                        .HasColumnType("int");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("FichaAnalisisId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FichaAnalisisId1")
                        .HasColumnType("int");

                    b.Property<string>("FichaArticuloEFIMEDId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FichaArticuloEFIMEDId1")
                        .HasColumnType("int");

                    b.Property<string>("FichaEjecucionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FichaEjecucionId1")
                        .HasColumnType("int");

                    b.Property<string>("FichaIncidenciaId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FichaIncidenciaId1")
                        .HasColumnType("int");

                    b.Property<string>("FichaReferencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeccionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("EmisorId1");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("FichaAnalisisId1");

                    b.HasIndex("FichaArticuloEFIMEDId1");

                    b.HasIndex("FichaEjecucionId1");

                    b.HasIndex("FichaIncidenciaId1");

                    b.HasIndex("SeccionId");

                    b.ToTable("FichasNoConformidadMedioAmbiente");
                });

            modelBuilder.Entity("Prokb.Data.Models.FichaNoConformidadProductoAcabado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("EmisorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmisorId1")
                        .HasColumnType("int");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("FichaArticuloId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FichaArticuloId1")
                        .HasColumnType("int");

                    b.Property<string>("FichaCalidadId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FichaCalidadId1")
                        .HasColumnType("int");

                    b.Property<string>("FichaIncidenciaId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FichaIncidenciaId1")
                        .HasColumnType("int");

                    b.Property<string>("FichaLogisticaId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FichaLogisticaId1")
                        .HasColumnType("int");

                    b.Property<string>("FichaPlanificacionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FichaPlanificacionId1")
                        .HasColumnType("int");

                    b.Property<string>("FichaReferencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeccionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("EmisorId1");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("FichaArticuloId1");

                    b.HasIndex("FichaCalidadId1");

                    b.HasIndex("FichaIncidenciaId1");

                    b.HasIndex("FichaLogisticaId1");

                    b.HasIndex("FichaPlanificacionId1");

                    b.HasIndex("SeccionId");

                    b.ToTable("FichasNoConformidadProductoAcabado");
                });

            modelBuilder.Entity("Prokb.Data.Models.FichaNoConformidadServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("EmisorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmisorId1")
                        .HasColumnType("int");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("FichaAnalisisId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FichaAnalisisId1")
                        .HasColumnType("int");

                    b.Property<string>("FichaArticuloEFIMEDId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FichaArticuloEFIMEDId1")
                        .HasColumnType("int");

                    b.Property<string>("FichaComprasId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FichaComprasId1")
                        .HasColumnType("int");

                    b.Property<string>("FichaEjecucionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FichaEjecucionId1")
                        .HasColumnType("int");

                    b.Property<string>("FichaIncidenciaId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FichaIncidenciaId1")
                        .HasColumnType("int");

                    b.Property<string>("FichaReferencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeccionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("EmisorId1");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("FichaAnalisisId1");

                    b.HasIndex("FichaArticuloEFIMEDId1");

                    b.HasIndex("FichaComprasId1");

                    b.HasIndex("FichaEjecucionId1");

                    b.HasIndex("FichaIncidenciaId1");

                    b.HasIndex("SeccionId");

                    b.ToTable("FichasNoConformidadServicio");
                });

            modelBuilder.Entity("Prokb.Data.Models.Motivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Motivos");
                });

            modelBuilder.Entity("Prokb.Data.Models.TiposFicha.FichaAnalisis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("DecisionId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("EmisorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmisorId1")
                        .HasColumnType("int");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<bool>("EsDecision")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaAnalisis")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("FichaReferencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropuestaId")
                        .HasColumnType("int");

                    b.Property<int>("ResponsableAnalisisId")
                        .HasColumnType("int");

                    b.Property<int>("SeccionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("DecisionId");

                    b.HasIndex("EmisorId1");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("PropuestaId");

                    b.HasIndex("ResponsableAnalisisId");

                    b.HasIndex("SeccionId");

                    b.ToTable("FichasAnalisis");
                });

            modelBuilder.Entity("Prokb.Data.Models.TiposFicha.FichaArticulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("ArticuloId")
                        .HasColumnType("int");

                    b.Property<string>("CantidadAfectada")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CantidadTotal")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EmisorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmisorId1")
                        .HasColumnType("int");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAlbaran")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaPedido")
                        .HasColumnType("datetime2");

                    b.Property<string>("FichaReferencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notas")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("NumAlbaran")
                        .HasColumnType("int");

                    b.Property<int>("NumPedido")
                        .HasColumnType("int");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.Property<int>("SeccionId")
                        .HasColumnType("int");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ArticuloId");

                    b.HasIndex("EmisorId1");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("ProveedorId");

                    b.HasIndex("SeccionId");

                    b.ToTable("FichasArticulo");
                });

            modelBuilder.Entity("Prokb.Data.Models.TiposFicha.FichaArticuloEFIMED", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("ArticuloId")
                        .HasColumnType("int");

                    b.Property<string>("EmisorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmisorId1")
                        .HasColumnType("int");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("FichaReferencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.Property<int>("SeccionId")
                        .HasColumnType("int");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ArticuloId");

                    b.HasIndex("EmisorId1");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("ProveedorId");

                    b.HasIndex("SeccionId");

                    b.ToTable("FichasArticuloEFIMED");
                });

            modelBuilder.Entity("Prokb.Data.Models.TiposFicha.FichaCalidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("DecisionCalidadId")
                        .HasColumnType("int");

                    b.Property<string>("DescripcionProblema")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescripcionSolucion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmisorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmisorId1")
                        .HasColumnType("int");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCalidad")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("FichaReferencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Finalizada")
                        .HasColumnType("bit");

                    b.Property<int>("MotivoId")
                        .HasColumnType("int");

                    b.Property<int>("ResponsableCalidadId")
                        .HasColumnType("int");

                    b.Property<int>("SeccionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("DecisionCalidadId");

                    b.HasIndex("EmisorId1");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("MotivoId");

                    b.HasIndex("ResponsableCalidadId");

                    b.HasIndex("SeccionId");

                    b.ToTable("FichasCalidad");
                });

            modelBuilder.Entity("Prokb.Data.Models.TiposFicha.FichaCompras", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("DecisionComprasId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmisorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmisorId1")
                        .HasColumnType("int");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCompras")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("FichaReferencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Finalizada")
                        .HasColumnType("bit");

                    b.Property<int?>("PropuestaComprasId")
                        .HasColumnType("int");

                    b.Property<int>("PropuestaId")
                        .HasColumnType("int");

                    b.Property<int>("ResponsableComprasId")
                        .HasColumnType("int");

                    b.Property<int>("SeccionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("DecisionComprasId");

                    b.HasIndex("EmisorId1");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("PropuestaComprasId");

                    b.HasIndex("ResponsableComprasId");

                    b.HasIndex("SeccionId");

                    b.ToTable("FichasCompras");
                });

            modelBuilder.Entity("Prokb.Data.Models.TiposFicha.FichaEjecucion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("DecisionEjecucionId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmisorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmisorId1")
                        .HasColumnType("int");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<bool>("EsDecision")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaEjecucion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("FichaReferencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Finalizada")
                        .HasColumnType("bit");

                    b.Property<int>("PropuestaEjecucionId")
                        .HasColumnType("int");

                    b.Property<int>("ResponsableEjecucionId")
                        .HasColumnType("int");

                    b.Property<int>("SeccionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("DecisionEjecucionId");

                    b.HasIndex("EmisorId1");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("PropuestaEjecucionId");

                    b.HasIndex("ResponsableEjecucionId");

                    b.HasIndex("SeccionId");

                    b.ToTable("FichasEjecucion");
                });

            modelBuilder.Entity("Prokb.Data.Models.TiposFicha.FichaIncidencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AfectaProduccion")
                        .HasColumnType("bit");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("DecisionIncidenciaId")
                        .HasColumnType("int");

                    b.Property<string>("DescripcionIncidencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmisorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmisorId1")
                        .HasColumnType("int");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<bool>("EsGrave")
                        .HasColumnType("bit");

                    b.Property<bool>("EsPropuesta")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("FichaReferencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropuestaIncidenciaId")
                        .HasColumnType("int");

                    b.Property<int>("SeccionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("DecisionIncidenciaId");

                    b.HasIndex("EmisorId1");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("PropuestaIncidenciaId");

                    b.HasIndex("SeccionId");

                    b.ToTable("FichasIncidencia");
                });

            modelBuilder.Entity("Prokb.Data.Models.TiposFicha.FichaLogistica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("DecisionLogisticaId")
                        .HasColumnType("int");

                    b.Property<string>("DescripcionLogistica")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmisorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmisorId1")
                        .HasColumnType("int");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaLogistica")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("FichaReferencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Finalizada")
                        .HasColumnType("bit");

                    b.Property<int>("ResponsableLogisticaId")
                        .HasColumnType("int");

                    b.Property<int>("SeccionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("DecisionLogisticaId");

                    b.HasIndex("EmisorId1");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("ResponsableLogisticaId");

                    b.HasIndex("SeccionId");

                    b.ToTable("FichasLogistica");
                });

            modelBuilder.Entity("Prokb.Data.Models.TiposFicha.FichaPlanificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("CantidadConforme")
                        .HasColumnType("int");

                    b.Property<int>("CantidadDevuelta")
                        .HasColumnType("int");

                    b.Property<string>("ComentarioProveedor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DecisionPlanificacionId")
                        .HasColumnType("int");

                    b.Property<string>("DescripcionDecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmisorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmisorId1")
                        .HasColumnType("int");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaPlanificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("FichaReferencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Finalizada")
                        .HasColumnType("bit");

                    b.Property<string>("GastosACargoDe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponsablePlanificacionId")
                        .HasColumnType("int");

                    b.Property<int>("SeccionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("DecisionPlanificacionId");

                    b.HasIndex("EmisorId1");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("ResponsablePlanificacionId");

                    b.HasIndex("SeccionId");

                    b.ToTable("FichasPlanificacion");
                });

            modelBuilder.Entity("Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Interno")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("Seccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreSeccion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Secciones");
                });

            modelBuilder.Entity("TipoDecisionSeccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DecisionId")
                        .HasColumnType("int");

                    b.Property<int>("SeccionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DecisionId");

                    b.HasIndex("SeccionId");

                    b.ToTable("TiposDecisionSeccion");
                });

            modelBuilder.Entity("TipoIncidenciaSeccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FichaIncidenciaId")
                        .HasColumnType("int");

                    b.Property<int>("IncidenciaId")
                        .HasColumnType("int");

                    b.Property<int?>("SeccionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FichaIncidenciaId");

                    b.HasIndex("IncidenciaId");

                    b.HasIndex("SeccionId");

                    b.ToTable("TiposIncidenciaSeccion");
                });

            modelBuilder.Entity("Usuario", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Area", b =>
                {
                    b.HasOne("Prokb.Data.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId1")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EmpresaAreaSeccionUsuario", b =>
                {
                    b.HasOne("Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Prokb.Data.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Seccion", "Seccion")
                        .WithMany()
                        .HasForeignKey("SeccionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Prokb.Data.Models.Documento", b =>
                {
                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaAnalisis", null)
                        .WithMany("Documentos")
                        .HasForeignKey("FichaAnalisisId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaArticuloEFIMED", null)
                        .WithMany("Documentos")
                        .HasForeignKey("FichaArticuloEFIMEDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaArticulo", null)
                        .WithMany("Documentos")
                        .HasForeignKey("FichaArticuloId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaCalidad", null)
                        .WithMany("Documentos")
                        .HasForeignKey("FichaCalidadId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaCompras", null)
                        .WithMany("Documentos")
                        .HasForeignKey("FichaComprasId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaEjecucion", null)
                        .WithMany("Documentos")
                        .HasForeignKey("FichaEjecucionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaIncidencia", null)
                        .WithMany("Documentos")
                        .HasForeignKey("FichaIncidenciaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaLogistica", null)
                        .WithMany("Documentos")
                        .HasForeignKey("FichaLogisticaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.FichaNoConformidadEficienciaEnergetica", null)
                        .WithMany("Documentos")
                        .HasForeignKey("FichaNoConformidadEficienciaEnergeticaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.FichaNoConformidadMedioAmbiente", null)
                        .WithMany("Documentos")
                        .HasForeignKey("FichaNoConformidadMedioAmbienteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.FichaNoConformidadProductoAcabado", null)
                        .WithMany("Documentos")
                        .HasForeignKey("FichaNoConformidadProductoAcabadoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.FichaNoConformidadServicio", null)
                        .WithMany("Documentos")
                        .HasForeignKey("FichaNoConformidadServicioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaPlanificacion", null)
                        .WithMany("Documentos")
                        .HasForeignKey("FichaPlanificacionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Prokb.Data.Models.FichaNoConformidadEficienciaEnergetica", b =>
                {
                    b.HasOne("Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmpresaAreaSeccionUsuario", "Emisor")
                        .WithMany()
                        .HasForeignKey("EmisorId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaAnalisis", "FichaAnalisis")
                        .WithMany()
                        .HasForeignKey("FichaAnalisisId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaArticuloEFIMED", "FichaArticuloEFIMED")
                        .WithMany()
                        .HasForeignKey("FichaArticuloEFIMEDId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaEjecucion", "FichaEjecucion")
                        .WithMany()
                        .HasForeignKey("FichaEjecucionId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaIncidencia", "FichaIncidencia")
                        .WithMany()
                        .HasForeignKey("FichaIncidenciaId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Seccion", "Seccion")
                        .WithMany()
                        .HasForeignKey("SeccionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Prokb.Data.Models.FichaNoConformidadMedioAmbiente", b =>
                {
                    b.HasOne("Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmpresaAreaSeccionUsuario", "Emisor")
                        .WithMany()
                        .HasForeignKey("EmisorId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaAnalisis", "FichaAnalisis")
                        .WithMany()
                        .HasForeignKey("FichaAnalisisId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaArticuloEFIMED", "FichaArticuloEFIMED")
                        .WithMany()
                        .HasForeignKey("FichaArticuloEFIMEDId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaEjecucion", "FichaEjecucion")
                        .WithMany()
                        .HasForeignKey("FichaEjecucionId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaIncidencia", "FichaIncidencia")
                        .WithMany()
                        .HasForeignKey("FichaIncidenciaId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Seccion", "Seccion")
                        .WithMany()
                        .HasForeignKey("SeccionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Prokb.Data.Models.FichaNoConformidadProductoAcabado", b =>
                {
                    b.HasOne("Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmpresaAreaSeccionUsuario", "Emisor")
                        .WithMany()
                        .HasForeignKey("EmisorId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaArticulo", "FichaArticulo")
                        .WithMany()
                        .HasForeignKey("FichaArticuloId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaCalidad", "FichaCalidad")
                        .WithMany()
                        .HasForeignKey("FichaCalidadId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaIncidencia", "FichaIncidencia")
                        .WithMany()
                        .HasForeignKey("FichaIncidenciaId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaLogistica", "FichaLogistica")
                        .WithMany()
                        .HasForeignKey("FichaLogisticaId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaPlanificacion", "FichaPlanificacion")
                        .WithMany()
                        .HasForeignKey("FichaPlanificacionId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Seccion", "Seccion")
                        .WithMany()
                        .HasForeignKey("SeccionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Prokb.Data.Models.FichaNoConformidadServicio", b =>
                {
                    b.HasOne("Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmpresaAreaSeccionUsuario", "Emisor")
                        .WithMany()
                        .HasForeignKey("EmisorId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaAnalisis", "FichaAnalisis")
                        .WithMany()
                        .HasForeignKey("FichaAnalisisId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaArticuloEFIMED", "FichaArticuloEFIMED")
                        .WithMany()
                        .HasForeignKey("FichaArticuloEFIMEDId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaCompras", "FichaCompras")
                        .WithMany()
                        .HasForeignKey("FichaComprasId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaEjecucion", "FichaEjecucion")
                        .WithMany()
                        .HasForeignKey("FichaEjecucionId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaIncidencia", "FichaIncidencia")
                        .WithMany()
                        .HasForeignKey("FichaIncidenciaId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Seccion", "Seccion")
                        .WithMany()
                        .HasForeignKey("SeccionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Prokb.Data.Models.TiposFicha.FichaAnalisis", b =>
                {
                    b.HasOne("Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TipoDecisionSeccion", "Decision")
                        .WithMany()
                        .HasForeignKey("DecisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmpresaAreaSeccionUsuario", "Emisor")
                        .WithMany()
                        .HasForeignKey("EmisorId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TipoDecisionSeccion", "Propuesta")
                        .WithMany()
                        .HasForeignKey("PropuestaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmpresaAreaSeccionUsuario", "ResponsableAnalisis")
                        .WithMany()
                        .HasForeignKey("ResponsableAnalisisId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Seccion", "Seccion")
                        .WithMany()
                        .HasForeignKey("SeccionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Prokb.Data.Models.TiposFicha.FichaArticulo", b =>
                {
                    b.HasOne("Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Articulo", "Articulo")
                        .WithMany()
                        .HasForeignKey("ArticuloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmpresaAreaSeccionUsuario", "Emisor")
                        .WithMany()
                        .HasForeignKey("EmisorId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Proveedor", "Proveedor")
                        .WithMany()
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Seccion", "Seccion")
                        .WithMany()
                        .HasForeignKey("SeccionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Prokb.Data.Models.TiposFicha.FichaArticuloEFIMED", b =>
                {
                    b.HasOne("Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Articulo", "Articulo")
                        .WithMany()
                        .HasForeignKey("ArticuloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmpresaAreaSeccionUsuario", "Emisor")
                        .WithMany()
                        .HasForeignKey("EmisorId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Proveedor", "Proveedor")
                        .WithMany()
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Seccion", "Seccion")
                        .WithMany()
                        .HasForeignKey("SeccionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Prokb.Data.Models.TiposFicha.FichaCalidad", b =>
                {
                    b.HasOne("Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TipoDecisionSeccion", "DecisionCalidad")
                        .WithMany()
                        .HasForeignKey("DecisionCalidadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmpresaAreaSeccionUsuario", "Emisor")
                        .WithMany()
                        .HasForeignKey("EmisorId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Prokb.Data.Models.Motivo", "Motivo")
                        .WithMany()
                        .HasForeignKey("MotivoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmpresaAreaSeccionUsuario", "ResponsableCalidad")
                        .WithMany()
                        .HasForeignKey("ResponsableCalidadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Seccion", "Seccion")
                        .WithMany()
                        .HasForeignKey("SeccionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Prokb.Data.Models.TiposFicha.FichaCompras", b =>
                {
                    b.HasOne("Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TipoDecisionSeccion", "DecisionCompras")
                        .WithMany()
                        .HasForeignKey("DecisionComprasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmpresaAreaSeccionUsuario", "Emisor")
                        .WithMany()
                        .HasForeignKey("EmisorId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TipoDecisionSeccion", "PropuestaCompras")
                        .WithMany()
                        .HasForeignKey("PropuestaComprasId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmpresaAreaSeccionUsuario", "ResponsableCompras")
                        .WithMany()
                        .HasForeignKey("ResponsableComprasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Seccion", "Seccion")
                        .WithMany()
                        .HasForeignKey("SeccionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Prokb.Data.Models.TiposFicha.FichaEjecucion", b =>
                {
                    b.HasOne("Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TipoDecisionSeccion", "DecisionEjecucion")
                        .WithMany()
                        .HasForeignKey("DecisionEjecucionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmpresaAreaSeccionUsuario", "Emisor")
                        .WithMany()
                        .HasForeignKey("EmisorId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TipoDecisionSeccion", "PropuestaEjecucion")
                        .WithMany()
                        .HasForeignKey("PropuestaEjecucionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmpresaAreaSeccionUsuario", "ResponsableEjecucion")
                        .WithMany()
                        .HasForeignKey("ResponsableEjecucionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Seccion", "Seccion")
                        .WithMany()
                        .HasForeignKey("SeccionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Prokb.Data.Models.TiposFicha.FichaIncidencia", b =>
                {
                    b.HasOne("Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TipoDecisionSeccion", "DecisionIncidencia")
                        .WithMany()
                        .HasForeignKey("DecisionIncidenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmpresaAreaSeccionUsuario", "Emisor")
                        .WithMany()
                        .HasForeignKey("EmisorId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TipoDecisionSeccion", "PropuestaIncidencia")
                        .WithMany()
                        .HasForeignKey("PropuestaIncidenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Seccion", "Seccion")
                        .WithMany()
                        .HasForeignKey("SeccionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Prokb.Data.Models.TiposFicha.FichaLogistica", b =>
                {
                    b.HasOne("Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TipoDecisionSeccion", "DecisionLogistica")
                        .WithMany()
                        .HasForeignKey("DecisionLogisticaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmpresaAreaSeccionUsuario", "Emisor")
                        .WithMany()
                        .HasForeignKey("EmisorId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmpresaAreaSeccionUsuario", "ResponsableLogistica")
                        .WithMany()
                        .HasForeignKey("ResponsableLogisticaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Seccion", "Seccion")
                        .WithMany()
                        .HasForeignKey("SeccionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Prokb.Data.Models.TiposFicha.FichaPlanificacion", b =>
                {
                    b.HasOne("Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TipoDecisionSeccion", "DecisionPlanificacion")
                        .WithMany()
                        .HasForeignKey("DecisionPlanificacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmpresaAreaSeccionUsuario", "Emisor")
                        .WithMany()
                        .HasForeignKey("EmisorId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prokb.Data.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmpresaAreaSeccionUsuario", "ResponsablePlanificacion")
                        .WithMany()
                        .HasForeignKey("ResponsablePlanificacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Seccion", "Seccion")
                        .WithMany()
                        .HasForeignKey("SeccionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Seccion", b =>
                {
                    b.HasOne("Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TipoDecisionSeccion", b =>
                {
                    b.HasOne("Decision", "Decision")
                        .WithMany()
                        .HasForeignKey("DecisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Seccion", "Seccion")
                        .WithMany()
                        .HasForeignKey("SeccionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TipoIncidenciaSeccion", b =>
                {
                    b.HasOne("Prokb.Data.Models.TiposFicha.FichaIncidencia", null)
                        .WithMany("TiposIncidencia")
                        .HasForeignKey("FichaIncidenciaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Incidencia", "Incidencia")
                        .WithMany()
                        .HasForeignKey("IncidenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Seccion", "Seccion")
                        .WithMany()
                        .HasForeignKey("SeccionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
